[{"path":"https://code-convenience-and-ideas.github.io/packTemplate/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 packTemplate authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/articles/Templating.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Checking Keyrings","text":"package aims provide easy way process arbitrary yaml format defined share secrets requirements scripts run different languages. idea defining template building support R Python check entries make easier work languages appropriate even within project.","code":"library(abKeyringR) abKeyringR::hello() #> [1] \"Hello, world!\" #> NULL"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/articles/Templating.html","id":"example-loading-and-checking-a-reference-yaml","dir":"Articles","previous_headings":"","what":"Example: Loading and checking a reference yaml","title":"Checking Keyrings","text":"simple example loads yaml file, check missing entries specified file.","code":"# Load an example yaml kept with the package local_folder_yaml <- system.file(\"extdata\", \"example_keyring_entries.yaml\",   package = \"abKeyringR\" ) default_email_parser <- function(x) {   \"hello\" }  loaded_keyring_entries <- abKeyringR::load_keyring_yaml(   local_folder_yaml, default_email_parser )  # Pull out the datasets from the yaml as a dataframe keyring_entry_df <- abKeyringR::keyring_yaml_to_df(loaded_keyring_entries)  # Check whether the entries exist in the system and give a warning if not resulting_missing_entries <- keyring_entry_df |>   # Add a column for presence of entries first   abKeyringR::check_table_entries_available() |>   # Filter to only missing entry and return + raise warning for missing   abKeyringR::raise_missing_entry_message() #> Got an error trying to get keyring entry. Will return FALSE #> Doesn't seem to be error due to missing element. #> Here's the original error message: #> The 'system' keyring does not exists, create it first! #> Got an error trying to get keyring entry. Will return FALSE #> Doesn't seem to be error due to missing element. #> Here's the original error message: #> The 'system' keyring does not exists, create it first! #> Got an error trying to get keyring entry. Will return FALSE #> Doesn't seem to be error due to missing element. #> Here's the original error message: #> The 'system' keyring does not exists, create it first! #> Warning in abKeyringR::raise_missing_entry_message(abKeyringR::check_table_entries_available(keyring_entry_df)): Entry secret_one not found. Please set it up appropriately. #> Service: test, implied username: runnerCustomEnding. #> Comment from docs: Note, should match your username and password for the service x. #> Warning in abKeyringR::raise_missing_entry_message(abKeyringR::check_table_entries_available(keyring_entry_df)): Entry secret_two not found. Please set it up appropriately. #> Service: test, implied username: hello@company.com. #> Comment from docs: Note, you should have set up an SSHKEY for this service. #> Warning in abKeyringR::raise_missing_entry_message(abKeyringR::check_table_entries_available(keyring_entry_df)): Entry secret_three not found. Please set it up appropriately. #> Service: test, implied username: harcoded_user. #> Comment from docs: You should go the the service and process an appropriate access token."},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alex Baker. Author, maintainer, copyright holder.","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Baker (2023). abKeyringR: simple collection tools check secrets stored specified yaml file. R package version 0.0.1,  https://code-convenience--ideas.github.io/abKeyringR/, https://github.com/code-convenience--ideas/abKeyringR.","code":"@Manual{,   title = {abKeyringR: A simple collection of tools to check for secrets stored as specified in a yaml file},   author = {Alex Baker},   year = {2023},   note = {R package version 0.0.1,  https://code-convenience-and-ideas.github.io/abKeyringR/},   url = {https://github.com/code-convenience-and-ideas/abKeyringR}, }"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/index.html","id":"packtemplate","dir":"","previous_headings":"","what":"A simple collection of tools to check for secrets stored as specified in a yaml file","title":"A simple collection of tools to check for secrets stored as specified in a yaml file","text":"goal packTemplate build example like build maintain R packages. hope integrate various parts ’d like ideally modern Continuous Integration, Continuous Development (CI/CD) approach R code. end, importantly aim cover: * Github actions checking package build * Automatic testing checks code test packages coverage checking * Git pre-commit operations enforce consistent styles formatting code * nice, modern logging approach * Automatic documentation site building example vignettes, new, readmes package website.","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A simple collection of tools to check for secrets stored as specified in a yaml file","text":"can install development version packTemplate like :","code":"# You can install thhis package directly from github devtools::install_github(\"https://github.com/code-convenience-and-ideas/packTemplate.git\")"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"A simple collection of tools to check for secrets stored as specified in a yaml file","text":"basic example shows solve common problem: special using README.Rmd instead just README.md? can include R chunks like : ’ll still need render README.Rmd regularly, keep README.md --date. devtools::build_readme() handy . can also embed plots, example:  case, don’t forget commit push resulting figure files, display GitHub CRAN.","code":"library(packTemplate)  ## basic example code packTemplate::hello() #> [1] \"Hello, world!\" summary(cars) #>      speed           dist        #>  Min.   : 4.0   Min.   :  2.00   #>  1st Qu.:12.0   1st Qu.: 26.00   #>  Median :15.0   Median : 36.00   #>  Mean   :15.4   Mean   : 42.98   #>  3rd Qu.:19.0   3rd Qu.: 56.00   #>  Max.   :25.0   Max.   :120.00"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/check_keyring_entry_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks whether a specified entry exists in the current system keyring — check_keyring_entry_exists","title":"Checks whether a specified entry exists in the current system keyring — check_keyring_entry_exists","text":"Checks whether specified entry exists current system keyring","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/check_keyring_entry_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks whether a specified entry exists in the current system keyring — check_keyring_entry_exists","text":"","code":"check_keyring_entry_exists(service_name, user_name)"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/check_keyring_entry_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks whether a specified entry exists in the current system keyring — check_keyring_entry_exists","text":"service_name keyring service_name entry check user_name keyring username entry check","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/check_keyring_entry_exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks whether a specified entry exists in the current system keyring — check_keyring_entry_exists","text":"Boolean indicating whether entry keyring ","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/check_keyring_entry_exists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks whether a specified entry exists in the current system keyring — check_keyring_entry_exists","text":"","code":"check_keyring_entry_exists('database', 'username') #> Got an error trying to get keyring entry. Will return FALSE #> Doesn't seem to be error due to missing element. #> Here's the original error message: #> The 'system' keyring does not exists, create it first! #> [1] FALSE"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/check_needed_entries_exist.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks every required keyring entry and whether they're defined in keyring — check_needed_entries_exist","title":"Checks every required keyring entry and whether they're defined in keyring — check_needed_entries_exist","text":"Checks every required keyring entry whether defined keyring","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/check_needed_entries_exist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks every required keyring entry and whether they're defined in keyring — check_needed_entries_exist","text":"","code":"check_needed_entries_exist(keyring_dataset)"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/check_needed_entries_exist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks every required keyring entry and whether they're defined in keyring — check_needed_entries_exist","text":"keyring_dataset keyring yaml data per standard spec","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/check_needed_entries_exist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks every required keyring entry and whether they're defined in keyring — check_needed_entries_exist","text":"list indicating whether keyring entry exists ","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/check_needed_entries_exist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks every required keyring entry and whether they're defined in keyring — check_needed_entries_exist","text":"","code":"keyring_block_list_one <- list(\"service\" = \"test\", \"username\" = \"hardcode\") keyring_block_list_two <- list(\"service\" = \"trial\", \"username\" = \"example\") keyring_data_format <- list(\"email_format\" = \"\", \"keyring_entries\" = list(\"secret_one\" = keyring_block_list_one,                          \"secret_two\" = keyring_block_list_two)) check_needed_entries_exist(keyring_data_format) #> Got an error trying to get keyring entry. Will return FALSE #> Doesn't seem to be error due to missing element. #> Here's the original error message: #> The 'system' keyring does not exists, create it first! #> Got an error trying to get keyring entry. Will return FALSE #> Doesn't seem to be error due to missing element. #> Here's the original error message: #> The 'system' keyring does not exists, create it first! #> Got an error trying to get keyring entry. Will return FALSE #> Doesn't seem to be error due to missing element. #> Here's the original error message: #> The 'system' keyring does not exists, create it first! #> Got an error trying to get keyring entry. Will return FALSE #> Doesn't seem to be error due to missing element. #> Here's the original error message: #> The 'system' keyring does not exists, create it first! #> $secret_one #> [1] FALSE #>  #> $secret_two #> [1] FALSE #>"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/check_secret_entry_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"checks both username and password entry exist for the keyring entry — check_secret_entry_exists","title":"checks both username and password entry exist for the keyring entry — check_secret_entry_exists","text":"checks username password entry exist keyring entry","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/check_secret_entry_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"checks both username and password entry exist for the keyring entry — check_secret_entry_exists","text":"","code":"check_secret_entry_exists(keyring_block)"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/check_secret_entry_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"checks both username and password entry exist for the keyring entry — check_secret_entry_exists","text":"keyring_block list capturing info keyring yaml spec","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/check_secret_entry_exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"checks both username and password entry exist for the keyring entry — check_secret_entry_exists","text":"boolean indicate present complete keyring entry","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/check_secret_entry_exists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"checks both username and password entry exist for the keyring entry — check_secret_entry_exists","text":"","code":"keyring_block_list <- list(\"service\" = \"test\", \"username\" = \"hardcode\") check_secret_entry_exists(keyring_block_list) #> Got an error trying to get keyring entry. Will return FALSE #> Doesn't seem to be error due to missing element. #> Here's the original error message: #> The 'system' keyring does not exists, create it first! #> Got an error trying to get keyring entry. Will return FALSE #> Doesn't seem to be error due to missing element. #> Here's the original error message: #> The 'system' keyring does not exists, create it first! #> [1] FALSE"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/check_table_entries_available.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks all entries in a prepared entry table and whether they are available — check_table_entries_available","title":"Checks all entries in a prepared entry table and whether they are available — check_table_entries_available","text":"Checks entries prepared entry table whether available","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/check_table_entries_available.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks all entries in a prepared entry table and whether they are available — check_table_entries_available","text":"","code":"check_table_entries_available(keyring_table)"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/check_table_entries_available.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks all entries in a prepared entry table and whether they are available — check_table_entries_available","text":"keyring_table tibble one entry per keyring service, user","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/check_table_entries_available.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks all entries in a prepared entry table and whether they are available — check_table_entries_available","text":"input table new column flagging whether entry exists","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/check_table_entries_available.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks all entries in a prepared entry table and whether they are available — check_table_entries_available","text":"","code":"# Creating a sample keyring table example_table <- dplyr::tibble( name = c(\"Key1\", \"Key2\", \"Key3\"), service = c(\"ServiceA\", \"ServiceB\", \"ServiceC\"), username = c(\"UserA\", NA, \"UserC\"), comment = c(\"Comment 1\", \"Comment 2\", \"Comment 3\") ) check_table_entries_available(example_table) #> Got an error trying to get keyring entry. Will return FALSE #> Doesn't seem to be error due to missing element. #> Here's the original error message: #> The 'system' keyring does not exists, create it first! #> Got an error trying to get keyring entry. Will return FALSE #> Doesn't seem to be error due to missing element. #> Here's the original error message: #> username must be a string (length 1 character) or NULL #> Got an error trying to get keyring entry. Will return FALSE #> Doesn't seem to be error due to missing element. #> Here's the original error message: #> The 'system' keyring does not exists, create it first! #> # A tibble: 3 × 5 #>   name  service  username comment   entry_exists #>   <chr> <chr>    <chr>    <chr>     <lgl>        #> 1 Key1  ServiceA UserA    Comment 1 FALSE        #> 2 Key2  ServiceB NA       Comment 2 FALSE        #> 3 Key3  ServiceC UserC    Comment 3 FALSE"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/construct_guide_message.html","id":null,"dir":"Reference","previous_headings":"","what":"Builds an informative message to summarise missing entries and next step — construct_guide_message","title":"Builds an informative message to summarise missing entries and next step — construct_guide_message","text":"Builds informative message summarise missing entries next step","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/construct_guide_message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Builds an informative message to summarise missing entries and next step — construct_guide_message","text":"","code":"construct_guide_message(keyring_table)"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/construct_guide_message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Builds an informative message to summarise missing entries and next step — construct_guide_message","text":"keyring_table tibble one entry per keyring service, user","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/construct_guide_message.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Builds an informative message to summarise missing entries and next step — construct_guide_message","text":"input table column guide message indicate missing entries.","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/construct_guide_message.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Builds an informative message to summarise missing entries and next step — construct_guide_message","text":"","code":"# Creating a sample keyring table example_table <- dplyr::tibble( name = c(\"Key1\", \"Key2\", \"Key3\"), service = c(\"ServiceA\", \"ServiceB\", \"ServiceC\"), username = c(\"UserA\", NA, \"UserC\"), comment = c(\"Comment 1\", \"Comment 2\", \"Comment 3\") ) construct_guide_message(example_table) #> # A tibble: 3 × 5 #>   name  service  username comment   guide_message                                #>   <chr> <chr>    <chr>    <chr>     <glue>                                       #> 1 Key1  ServiceA UserA    Comment 1 Entry Key1 not found. Please set it up appr… #> 2 Key2  ServiceB NA       Comment 2 Entry Key2 not found. Please set it up appr… #> 3 Key3  ServiceC UserC    Comment 3 Entry Key3 not found. Please set it up appr…"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/convert_entry_to_uppercase.html","id":null,"dir":"Reference","previous_headings":"","what":"Takes a keyring entry and converts it to upper case — convert_entry_to_uppercase","title":"Takes a keyring entry and converts it to upper case — convert_entry_to_uppercase","text":"Takes keyring entry converts upper case","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/convert_entry_to_uppercase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Takes a keyring entry and converts it to upper case — convert_entry_to_uppercase","text":"","code":"convert_entry_to_uppercase(entry_string)"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/convert_entry_to_uppercase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Takes a keyring entry and converts it to upper case — convert_entry_to_uppercase","text":"entry_string string keyring entry","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/convert_entry_to_uppercase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Takes a keyring entry and converts it to upper case — convert_entry_to_uppercase","text":"upper cases version keyring entry","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/convert_entry_to_uppercase.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Takes a keyring entry and converts it to upper case — convert_entry_to_uppercase","text":"","code":"convert_entry_to_uppercase(\"lower\") #> [1] \"LOWER\""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/df_shape_log_message.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a log of dataframe shape, and entry missingness — df_shape_log_message","title":"Creates a log of dataframe shape, and entry missingness — df_shape_log_message","text":"Creates log dataframe shape, entry missingness","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/df_shape_log_message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a log of dataframe shape, and entry missingness — df_shape_log_message","text":"","code":"df_shape_log_message(data_to_log)"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/df_shape_log_message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a log of dataframe shape, and entry missingness — df_shape_log_message","text":"data_to_log dataset create log message ","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/df_shape_log_message.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a log of dataframe shape, and entry missingness — df_shape_log_message","text":"string summarising dataframe shape missing info","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/df_shape_log_message.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a log of dataframe shape, and entry missingness — df_shape_log_message","text":"","code":"df_shape_log_message(cars) #> Dataframe has: 50 rows, 2 columns, #> 50 rows without missing entries, #> 2 columns without missing entries"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/extract_email_domain.html","id":null,"dir":"Reference","previous_headings":"","what":"Pulls out the domain from an email format string — extract_email_domain","title":"Pulls out the domain from an email format string — extract_email_domain","text":"Pulls domain email format string","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/extract_email_domain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pulls out the domain from an email format string — extract_email_domain","text":"","code":"extract_email_domain(email_format)"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/extract_email_domain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pulls out the domain from an email format string — extract_email_domain","text":"email_format string specifying required email address format","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/extract_email_domain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pulls out the domain from an email format string — extract_email_domain","text":"domain email format string","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/extract_email_domain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pulls out the domain from an email format string — extract_email_domain","text":"","code":"specified_email_format <- \"first_name.last_name@my_domain.com\" extract_email_domain(specified_email_format) #> [1] \"my_domain.com\""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/fill_special_entry.html","id":null,"dir":"Reference","previous_headings":"","what":"Takes an input entry string and replaces certain special entries — fill_special_entry","title":"Takes an input entry string and replaces certain special entries — fill_special_entry","text":"Takes input entry string replaces certain special entries","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/fill_special_entry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Takes an input entry string and replaces certain special entries — fill_special_entry","text":"","code":"fill_special_entry(candidate_string, email_format, email_inferer)"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/fill_special_entry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Takes an input entry string and replaces certain special entries — fill_special_entry","text":"candidate_string string possible special entries replace email_format string specifying required email address format email_inferer function infer email address start","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/fill_special_entry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Takes an input entry string and replaces certain special entries — fill_special_entry","text":"parse entry special values replaced fixed string","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/fill_special_entry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Takes an input entry string and replaces certain special entries — fill_special_entry","text":"","code":"fill_special_entry(   \"{system_user}CustomEnding\",   \"first_name.last_name@my_domain.com\",   function(x) {     \"hello\"   } ) #> [1] \"runnerCustomEnding\""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/generic_email_inferer.html","id":null,"dir":"Reference","previous_headings":"","what":"Takes an email format, ignores it and returns user name for start of email — generic_email_inferer","title":"Takes an email format, ignores it and returns user name for start of email — generic_email_inferer","text":"Takes email format, ignores returns user name start email","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/generic_email_inferer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Takes an email format, ignores it and returns user name for start of email — generic_email_inferer","text":"","code":"generic_email_inferer(email_format)"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/generic_email_inferer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Takes an email format, ignores it and returns user name for start of email — generic_email_inferer","text":"email_format string specifying required email address format","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/generic_email_inferer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Takes an email format, ignores it and returns user name for start of email — generic_email_inferer","text":"inferred email prefix supplied format type","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/generic_email_inferer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Takes an email format, ignores it and returns user name for start of email — generic_email_inferer","text":"","code":"specified_email_format <- \"first_name.last_name@my_domain.com\" generic_email_inferer(specified_email_format) #> [1] \"runner\""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/get_entry_names_from_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Loops over a list to get a vector of name entries — get_entry_names_from_field","title":"Loops over a list to get a vector of name entries — get_entry_names_from_field","text":"Loops list get vector name entries","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/get_entry_names_from_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loops over a list to get a vector of name entries — get_entry_names_from_field","text":"","code":"get_entry_names_from_field(list_to_extract_names)"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/get_entry_names_from_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loops over a list to get a vector of name entries — get_entry_names_from_field","text":"list_to_extract_names list entries containing name field","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/get_entry_names_from_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Loops over a list to get a vector of name entries — get_entry_names_from_field","text":"vector names entry list","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/get_entry_names_from_field.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Loops over a list to get a vector of name entries — get_entry_names_from_field","text":"","code":"get_entry_names_from_field(list(   list(\"name\" = \"a\"),   list(\"name\" = \"b\") )) #> [1] \"a\" \"b\""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/get_password_from_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves the password for an entry from the keyring matching current block — get_password_from_block","title":"Retrieves the password for an entry from the keyring matching current block — get_password_from_block","text":"Retrieves password entry keyring matching current block","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/get_password_from_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves the password for an entry from the keyring matching current block — get_password_from_block","text":"","code":"get_password_from_block(keyring_block)"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/get_password_from_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves the password for an entry from the keyring matching current block — get_password_from_block","text":"keyring_block list capturing info keyring yaml spec","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/get_password_from_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieves the password for an entry from the keyring matching current block — get_password_from_block","text":"string password captured keyring","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/get_password_from_block.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieves the password for an entry from the keyring matching current block — get_password_from_block","text":"","code":"if (FALSE) { # Add a temporary keyring entry for testing keyring::key_set_with_value(\"database\", \"username\", \"my_user\") keyring::key_set_with_value(\"database\", \"my_user\", \"my_pswd\")  keyring_block_list_one <- list(\"service\" = \"database\",                                \"username\" = \"my_user\") get_password_from_block(keyring_block_list_one)  # clean up: remove temp keyring entry keyring::key_delete(\"database\", \"username\") keyring::key_delete(\"database\", \"my_user\") }"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/get_password_from_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves the password for an entry from the keyring dataset — get_password_from_data","title":"Retrieves the password for an entry from the keyring dataset — get_password_from_data","text":"Retrieves password entry keyring dataset","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/get_password_from_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves the password for an entry from the keyring dataset — get_password_from_data","text":"","code":"get_password_from_data(keyring_dataset, entry_name)"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/get_password_from_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves the password for an entry from the keyring dataset — get_password_from_data","text":"keyring_dataset keyring yaml data per standard spec entry_name name entry get keyring dataset","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/get_password_from_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieves the password for an entry from the keyring dataset — get_password_from_data","text":"string password captured keyring","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/get_password_from_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieves the password for an entry from the keyring dataset — get_password_from_data","text":"","code":"if (FALSE) { keyring::key_set_with_value(\"database\", \"username\", \"my_user\") keyring::key_set_with_value(\"database\", \"my_user\", \"my_pswd\") keyring::key_set_with_value(\"database2\", \"username\", \"my_user\") keyring::key_set_with_value(\"database2\", \"my_user\", \"my_pswd\")  keyring_block_list_one <- list(\"service\" = \"database\",                                \"username\" = \"my_user\") keyring_block_list_two <- list(\"service\" = \"database2\",                                \"username\" = \"my_user\") keyring_data_format <- list(\"email_format\" = \"\", \"keyring_entries\" = list(\"secret_one\" = keyring_block_list_one,                          \"secret_two\" = keyring_block_list_two)) get_password_from_data(keyring_data_format, \"secret_one\")  # clean up: remove temp keyring entry keyring::key_delete(\"database\", \"username\") keyring::key_delete(\"database\", \"my_user\") keyring::key_delete(\"database2\", \"username\") keyring::key_delete(\"database2\", \"my_user\") }"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/get_username_from_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves the username for an entry from the keyring matching current block — get_username_from_block","title":"Retrieves the username for an entry from the keyring matching current block — get_username_from_block","text":"Retrieves username entry keyring matching current block","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/get_username_from_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves the username for an entry from the keyring matching current block — get_username_from_block","text":"","code":"get_username_from_block(keyring_block)"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/get_username_from_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves the username for an entry from the keyring matching current block — get_username_from_block","text":"keyring_block list capturing info keyring yaml spec","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/get_username_from_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieves the username for an entry from the keyring matching current block — get_username_from_block","text":"string username captured keyring","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/get_username_from_block.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieves the username for an entry from the keyring matching current block — get_username_from_block","text":"","code":"if (FALSE) { keyring::key_set_with_value(\"database\", \"username\", \"my_user\") keyring::key_set_with_value(\"database\", \"my_user\", \"my_pswd\")  keyring_block_list_one <- list(\"service\" = \"database\",                                \"username\" = \"my_user\") get_username_from_block(keyring_block_list_one)  # clean up: remove temp keyring entry keyring::key_delete(\"database\", \"username\") keyring::key_delete(\"database\", \"my_user\") }"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/get_username_from_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieves the username for an entry from the keyring dataset — get_username_from_data","title":"Retrieves the username for an entry from the keyring dataset — get_username_from_data","text":"Retrieves username entry keyring dataset","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/get_username_from_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieves the username for an entry from the keyring dataset — get_username_from_data","text":"","code":"get_username_from_data(keyring_dataset, entry_name)"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/get_username_from_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieves the username for an entry from the keyring dataset — get_username_from_data","text":"keyring_dataset keyring yaml data per standard spec entry_name name entry get keyring dataset","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/get_username_from_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieves the username for an entry from the keyring dataset — get_username_from_data","text":"string username captured keyring","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/get_username_from_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieves the username for an entry from the keyring dataset — get_username_from_data","text":"","code":"if (FALSE) { keyring::key_set_with_value(\"database\", \"username\", \"my_user\") keyring::key_set_with_value(\"database\", \"my_user\", \"my_pswd\") keyring::key_set_with_value(\"database2\", \"username\", \"my_user\") keyring::key_set_with_value(\"database2\", \"my_user\", \"my_pswd\")  keyring_block_list_one <- list(\"service\" = \"database\",                                \"username\" = \"my_user\") keyring_block_list_two <- list(\"service\" = \"database2\",                                \"username\" = \"my_user\") keyring_data_format <- list(\"email_format\" = \"\", \"keyring_entries\" = list(\"secret_one\" = keyring_block_list_one,                          \"secret_two\" = keyring_block_list_two)) get_username_from_data(keyring_data_format, \"secret_one\")  # clean up: remove temp keyring entry keyring::key_delete(\"database\", \"username\") keyring::key_delete(\"database\", \"my_user\") keyring::key_delete(\"database2\", \"username\") keyring::key_delete(\"database2\", \"my_user\") }"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/hello.html","id":null,"dir":"Reference","previous_headings":"","what":"Hello function to print standard example. — hello","title":"Hello function to print standard example. — hello","text":"Hello function print standard example.","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/hello.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hello function to print standard example. — hello","text":"","code":"hello()"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/hello.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hello function to print standard example. — hello","text":"Null","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/hello.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hello function to print standard example. — hello","text":"","code":"hello() #> [1] \"Hello, world!\" #> NULL"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/keyring_yaml_to_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Unnests dataset entries into a tibble of required secret entries — keyring_yaml_to_df","title":"Unnests dataset entries into a tibble of required secret entries — keyring_yaml_to_df","text":"Unnests dataset entries tibble required secret entries","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/keyring_yaml_to_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unnests dataset entries into a tibble of required secret entries — keyring_yaml_to_df","text":"","code":"keyring_yaml_to_df(yaml_data_as_list)"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/keyring_yaml_to_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unnests dataset entries into a tibble of required secret entries — keyring_yaml_to_df","text":"yaml_data_as_list yaml document loaded nested list","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/keyring_yaml_to_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unnests dataset entries into a tibble of required secret entries — keyring_yaml_to_df","text":"tibble containing one row secret required","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/keyring_yaml_to_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unnests dataset entries into a tibble of required secret entries — keyring_yaml_to_df","text":"","code":"yaml_data_example <- list(\"keyring_entries\" = list( list(\"name\" = \"test_one\", my_row_data = 1), list(\"name\" = \"test_two\", my_row_data = 2), list(\"name\" = \"test_three\", my_row_data = 3))) table_of_yaml_data <- keyring_yaml_to_df(yaml_data_example)"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/load_keyring_yaml.html","id":null,"dir":"Reference","previous_headings":"","what":"Loads in keyring yaml and try to process special entries — load_keyring_yaml","title":"Loads in keyring yaml and try to process special entries — load_keyring_yaml","text":"Loads keyring yaml try process special entries","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/load_keyring_yaml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loads in keyring yaml and try to process special entries — load_keyring_yaml","text":"","code":"load_keyring_yaml(path_to_yaml_file, custom_email_processor)"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/load_keyring_yaml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loads in keyring yaml and try to process special entries — load_keyring_yaml","text":"path_to_yaml_file string path yaml file custom_email_processor function can resolve email template","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/load_keyring_yaml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Loads in keyring yaml and try to process special entries — load_keyring_yaml","text":"prepared yaml dataset checking keyring entries","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/load_keyring_yaml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Loads in keyring yaml and try to process special entries — load_keyring_yaml","text":"","code":"local_folder_yaml <- system.file(\"extdata\", \"example_keyring_entries.yaml\",   package = \"abKeyringR\" ) default_email_parser <- function(x) {   \"hello\" } load_keyring_yaml(local_folder_yaml, default_email_parser) #> $email_format #> [1] \"first_name.last_name@company.com\" #>  #> $keyring_entries #> $keyring_entries$secret_one #> $keyring_entries$secret_one$name #> [1] \"secret_one\" #>  #> $keyring_entries$secret_one$type #> [1] \"password\" #>  #> $keyring_entries$secret_one$username #> [1] \"runnerCustomEnding\" #>  #> $keyring_entries$secret_one$comment #> [1] \"Note, should match your username and password for the service x.\" #>  #> $keyring_entries$secret_one$service #> [1] \"test\" #>  #>  #> $keyring_entries$secret_two #> $keyring_entries$secret_two$name #> [1] \"secret_two\" #>  #> $keyring_entries$secret_two$type #> [1] \"sshkey\" #>  #> $keyring_entries$secret_two$username #> [1] \"hello@company.com\" #>  #> $keyring_entries$secret_two$comment #> [1] \"Note, you should have set up an SSHKEY for this service.\" #>  #> $keyring_entries$secret_two$service #> [1] \"test\" #>  #>  #> $keyring_entries$secret_three #> $keyring_entries$secret_three$name #> [1] \"secret_three\" #>  #> $keyring_entries$secret_three$type #> [1] \"token\" #>  #> $keyring_entries$secret_three$username #> [1] \"harcoded_user\" #>  #> $keyring_entries$secret_three$comment #> [1] \"You should go the the service and process an appropriate access token.\" #>  #> $keyring_entries$secret_three$service #> [1] \"test\" #>  #>  #>"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/load_user_email.html","id":null,"dir":"Reference","previous_headings":"","what":"Infers the user email via a user supplied method and — load_user_email","title":"Infers the user email via a user supplied method and — load_user_email","text":"Infers user email via user supplied method ","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/load_user_email.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infers the user email via a user supplied method and — load_user_email","text":"","code":"load_user_email(email_format, method_to_infer_name)"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/load_user_email.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Infers the user email via a user supplied method and — load_user_email","text":"email_format string specifying required email address format method_to_infer_name function infer email address start","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/load_user_email.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Infers the user email via a user supplied method and — load_user_email","text":"user-specific email use keyring entries","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/load_user_email.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Infers the user email via a user supplied method and — load_user_email","text":"","code":"email_start_inference <- function(x) {   \"hello\" } specified_email_format <- \"first_name.last_name@my_domain.com\" load_user_email(specified_email_format, email_start_inference) #> [1] \"hello@my_domain.com\""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/load_username.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets system user name from system info — load_username","title":"Gets system user name from system info — load_username","text":"Gets system user name system info","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/load_username.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets system user name from system info — load_username","text":"","code":"load_username()"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/load_username.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets system user name from system info — load_username","text":"current users login name","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/load_username.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gets system user name from system info — load_username","text":"","code":"load_username() #> [1] \"runner\""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/promote_keyring_entry_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets entry names for keyring entry to match their name field — promote_keyring_entry_names","title":"Sets entry names for keyring entry to match their name field — promote_keyring_entry_names","text":"Sets entry names keyring entry match name field","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/promote_keyring_entry_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets entry names for keyring entry to match their name field — promote_keyring_entry_names","text":"","code":"promote_keyring_entry_names(yaml_data_as_list)"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/promote_keyring_entry_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets entry names for keyring entry to match their name field — promote_keyring_entry_names","text":"yaml_data_as_list yaml document loaded nested list","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/promote_keyring_entry_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets entry names for keyring entry to match their name field — promote_keyring_entry_names","text":"yaml keyring entries","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/promote_keyring_entry_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets entry names for keyring entry to match their name field — promote_keyring_entry_names","text":"","code":"test_yaml <- list(   \"email_format\" = \"first_name.last_name@company.com\",   \"keyring_entries\" = list(     list(\"name\" = \"keyring_one\"),     list(\"name\" = \"keyring_two\")   ) ) promote_keyring_entry_names(test_yaml) #> $email_format #> [1] \"first_name.last_name@company.com\" #>  #> $keyring_entries #> $keyring_entries$keyring_one #> $keyring_entries$keyring_one$name #> [1] \"keyring_one\" #>  #>  #> $keyring_entries$keyring_two #> $keyring_entries$keyring_two$name #> [1] \"keyring_two\" #>  #>  #>"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/raise_missing_entry_message.html","id":null,"dir":"Reference","previous_headings":"","what":"Raises an informative message to suggest what needs to be done. — raise_missing_entry_message","title":"Raises an informative message to suggest what needs to be done. — raise_missing_entry_message","text":"Raises informative message suggest needs done.","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/raise_missing_entry_message.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raises an informative message to suggest what needs to be done. — raise_missing_entry_message","text":"","code":"raise_missing_entry_message(keyring_table)"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/raise_missing_entry_message.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raises an informative message to suggest what needs to be done. — raise_missing_entry_message","text":"keyring_table tibble one entry per keyring service, user","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/raise_missing_entry_message.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raises an informative message to suggest what needs to be done. — raise_missing_entry_message","text":"input table missing entries + guide message warning","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/raise_missing_entry_message.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Raises an informative message to suggest what needs to be done. — raise_missing_entry_message","text":"","code":"# Creating a sample keyring table example_table <- dplyr::tibble( name = c(\"Key1\", \"Key2\", \"Key3\"), service = c(\"ServiceA\", \"ServiceB\", \"ServiceC\"), username = c(\"UserA\", NA, \"UserC\"), comment = c(\"Comment 1\", \"Comment 2\", \"Comment 3\"), entry_exists = c(FALSE, FALSE, TRUE) ) raise_missing_entry_message(example_table) #> Warning: Entry Key1 not found. Please set it up appropriately. #> Service: ServiceA, implied username: UserA. #> Comment from docs: Comment 1 #> Warning: Entry Key2 not found. Please set it up appropriately. #> Service: ServiceB, implied username: NA. #> Comment from docs: Comment 2 #> # A tibble: 2 × 6 #>   name  service  username comment   entry_exists guide_message                   #>   <chr> <chr>    <chr>    <chr>     <lgl>        <glue>                          #> 1 Key1  ServiceA UserA    Comment 1 FALSE        Entry Key1 not found. Please s… #> 2 Key2  ServiceB NA       Comment 2 FALSE        Entry Key2 not found. Please s…"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/update_keyring_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Updates the username entry within a single keyring block — update_keyring_block","title":"Updates the username entry within a single keyring block — update_keyring_block","text":"Updates username entry within single keyring block","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/update_keyring_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Updates the username entry within a single keyring block — update_keyring_block","text":"","code":"update_keyring_block(keyring_block, email_template, email_processor)"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/update_keyring_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Updates the username entry within a single keyring block — update_keyring_block","text":"keyring_block single keyring entry yaml data email_template string specifying required email address format email_processor function can resolve email template","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/update_keyring_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Updates the username entry within a single keyring block — update_keyring_block","text":"infers updates username returns keyring entry update","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/update_keyring_block.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Updates the username entry within a single keyring block — update_keyring_block","text":"","code":"email_start_inference <- function(x) {   \"hello\" } specified_email_format <- \"first_name.last_name@my_domain.com\" keyring_example_block <- list(   \"name\" = \"keyring_one\",   \"username\" = \"harcoded_user\" ) update_keyring_block(   keyring_example_block, specified_email_format,   email_start_inference ) #> $name #> [1] \"keyring_one\" #>  #> $username #> [1] \"harcoded_user\" #>"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/update_list_of_keyrings.html","id":null,"dir":"Reference","previous_headings":"","what":"Updates entries for every keyring in the yaml list — update_list_of_keyrings","title":"Updates entries for every keyring in the yaml list — update_list_of_keyrings","text":"Updates entries every keyring yaml list","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/update_list_of_keyrings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Updates entries for every keyring in the yaml list — update_list_of_keyrings","text":"","code":"update_list_of_keyrings(yaml_data_as_list, email_template, email_processor)"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/update_list_of_keyrings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Updates entries for every keyring in the yaml list — update_list_of_keyrings","text":"yaml_data_as_list yaml document loaded nested list email_template string specifying required email address format email_processor function can resolve email template","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/update_list_of_keyrings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Updates entries for every keyring in the yaml list — update_list_of_keyrings","text":"yaml keyring entry resolved usernames","code":""},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/reference/update_list_of_keyrings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Updates entries for every keyring in the yaml list — update_list_of_keyrings","text":"","code":"simple_data_update <- function(dataset_block, dataset_defaults) {   dataset_block$default <- \"test_value\"   return(dataset_block) } test_yaml <- list(   \"default_script_path\" = \".\",   \"datasets_to_load\" = list(     list(\"name\" = \"dataset_one\"),     list(\"name\" = \"dataset_two\")   ) ) update_list_of_keyrings(test_yaml, simple_data_update) #> $default_script_path #> [1] \".\" #>  #> $datasets_to_load #> $datasets_to_load[[1]] #> $datasets_to_load[[1]]$name #> [1] \"dataset_one\" #>  #>  #> $datasets_to_load[[2]] #> $datasets_to_load[[2]]$name #> [1] \"dataset_two\" #>  #>  #>"},{"path":"https://code-convenience-and-ideas.github.io/packTemplate/news/index.html","id":"abkeyringr-001","dir":"Changelog","previous_headings":"","what":"abKeyringR 0.0.1","title":"abKeyringR 0.0.1","text":"Initial package renaming package template Created structure + supporting files default template.","code":""}]
